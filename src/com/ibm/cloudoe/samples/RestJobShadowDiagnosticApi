package com.rbc.job.shadow.api;

import java.io.IOException;
import java.net.URI;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.ws.rs.FormParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.CookieStore;
import org.apache.http.client.fluent.Executor;
import org.apache.http.client.fluent.Request;
import org.apache.http.client.fluent.Response;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.util.EntityUtils;
import org.springframework.stereotype.Component;

import com.ibm.json.java.JSONArray;
import com.ibm.json.java.JSONObject;

@Component
@Path("/diagnostic")
public class RestRBCJobShadowDiagnosticApi {
	private static Logger logger = Logger.getLogger(RestRBCJobShadowDiagnosticApi.class.getName());
	private static final long serialVersionUID = 1L;

	private String serviceName = "tradeoff_analytics";

	// If running locally complete the variables below with the information in VCAP_SERVICES
	private String baseURL = "<url>";
	private String username = "<username>";
	private String password = "<password>";
	
	
	@POST
	@Path("tradeoff")
	@Produces(MediaType.APPLICATION_JSON)
	public int tradeoff(@FormParam("req") String req){
		processVCAP_Services();
		try {		
		String queryStr = req;
		String url = baseURL + "/v1/dilemmas";
		if (queryStr != null) {
			url += "?" + queryStr;
		}
		
		URI uri = new URI(url).normalize();
		Request newReq = Request.Post(uri);
		newReq.addHeader("Accept", "application/json");
		//InputStreamEntity entity = new InputStreamEntity(req.getInputStream());
		//newReq.bodyString(EntityUtils.toString(entity,"UTF-8"), ContentType.APPLICATION_JSON);
		
		
		
		Executor executor = this.buildExecutor(uri);
		Response response;
		
			response = executor.execute(newReq);
			HttpResponse httpResponse = response.returnResponse();
			return httpResponse.getStatusLine().getStatusCode();			
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
		
	}
	/**
	 * Build an executor for the specified url. This disables cookies and sets
	 * preemptive authentication (creds are sent without waiting for a 401).
	 * 
	 * NOTE: This is required to avoid issues with load balancers that use
	 * cookies due to Apache Http Client issue:
	 * https://issues.apache.org/jira/browse/HTTPCLIENT-1451
	 * 
	 * @param url
	 * @return
	 */
	private Executor buildExecutor(URI url) {
		return Executor.newInstance().auth(username, password)
				.authPreemptive(new HttpHost(url.getHost(), url.getPort(), url.getScheme()))
				.cookieStore(new CookieStore() {
					// Noop cookie store.
					public void addCookie(Cookie arg0) {
					}

					public void clear() {
					}

					public boolean clearExpired(Date arg0) {
						return false;
					}

					public List<Cookie> getCookies() {
						return Collections.emptyList();
					}
				});
	}
	
	/**
	 * Gets the <b>VCAP_SERVICES</b> environment variable and return it
	 *  as a JSONObject.
	 *
	 * @return the VCAP_SERVICES as Json
	 */
	private JSONObject getVcapServices() {
		String envServices = System.getenv("VCAP_SERVICES");
		if (envServices == null) return null;
		JSONObject sysEnv = null;
		try {
			sysEnv = JSONObject.parse(envServices);
		} catch (IOException e) {
			// Do nothing, fall through to defaults
			logger.log(Level.SEVERE, "Error parsing VCAP_SERVICES: "+e.getMessage(), e);
		}
		return sysEnv;
	}	
	/**
	 * If exists, process the VCAP_SERVICES environment variable in order to get the
	 * username, password and baseURL
	 */
	private void processVCAP_Services() {
		logger.info("Processing VCAP_SERVICES");
		JSONObject sysEnv = getVcapServices();
		if (sysEnv == null) return;
		logger.info("Looking for: "+ serviceName );

		for (Object key : sysEnv.keySet()) {
			String keyString = (String) key;
			logger.info("found key: " + key);
			if (keyString.startsWith(serviceName)) {
				JSONArray services = (JSONArray)sysEnv.get(key);
				JSONObject service = (JSONObject)services.get(0);
				JSONObject credentials = (JSONObject)service.get("credentials");
					
				baseURL  = (String)credentials.get("url");
				username = (String)credentials.get("username");
				password = (String)credentials.get("password");
							
				logger.info("baseURL  = "+baseURL);
				logger.info("username = "+username);
				logger.info("password = "+password);
			} else {
				logger.info("Doesn't match /^"+serviceName+"/");
			}
		}
	}

}
